<?php

class Shortcode
{
    protected function parse_nuapay_attributes($attrs)
    {
        return shortcode_atts(array(
            'integration_type' => null, //'REDIRECT'/'OVERLAYE'
            'api_key' => null,          //apiKey
            'scheme_type' => null,      //merchantSchemeType
            'payment_type' => null,     //paymentType
            'scheme_id' => null,        //merchantSchemeId
            'creditor_iban' => null,    //merchantIBAN
            //mandateUMR				- optional (generated by system)
            //debtorContractReference	- optional
        ), $attrs);
    }

    protected function fetch_access_token($rest_url, $api_key, $shortcode_attr)
    {
        $token_request = $this->prepare_token_request($shortcode_attr);

        return wp_remote_post($rest_url . '/emandates', array(
            'method' => 'POST',
            'timeout' => 45,
            'redirection' => 5,
            'httpversion' => '1.0',
            'blocking' => true,
            'headers' => array(
                'Content-Type' => 'application/json',
                'Authorization' => 'Basic ' . base64_encode($api_key . ':')
            ),
            'body' => json_encode($token_request),
            'cookies' => array()
        ));
    }

    private function prepare_token_request($shortcode_attr)
    {
        $scheme_type = $shortcode_attr['scheme_type'];
        $payment_type = $shortcode_attr['payment_type'];
        $scheme_id = $shortcode_attr['scheme_id'];
        $creditor_iban = $shortcode_attr['creditor_iban'];
        $query_param_mandate_id = $this->get_query_param_mandate();

        return array(
            'merchantDetails' => array(
                'creditorSchemeId' => $scheme_id,
                'schemeType' => $scheme_type,
                'mandateType' => $payment_type,
                'iban' => $creditor_iban,
                'mandateId' => $query_param_mandate_id,
            ),
        );
    }

    private function get_query_param_mandate()
    {
        $query_param_mandate_id = null;
        if (isset ($_REQUEST['id'])) {
            $query_param_mandate_id = $_REQUEST['id'];
            //url decode the parameter
            $query_param_mandate_id = urldecode($query_param_mandate_id);
            if (!$this->is_valid_mandate_id($query_param_mandate_id)) {
                NPUtils::render('error', array(
                    'message' => NPUtils::i18('Invalid mandate id characters found.')
                ));
            }
            if ($this->is_mandate_id_too_long($query_param_mandate_id)) {
                NPUtils::render('error', array(
                    'message' => NPUtils::i18('Invalid mandate id, too long.')
                ));
            }
        }

        return $query_param_mandate_id;
    }

    protected function is_valid_mandate_id($str)
    {
        if (preg_match("/[^A-Z a-z0-9\?\/\-\(\)\.\,\'\+\:]/", $str)) {
            return false;
        }
        return true;
    }

    protected function is_mandate_id_too_long($str)
    {
        $max_length = 35;
        $length = strlen($str);
        return $length > $max_length;
    }

    protected function attach_jQuery($web_url)
    {
        if (!wp_script_is('jquery')) {
            wp_enqueue_script('np-js-emandates-api-jquery', $web_url . '/webjars/jquery/jquery.min.js');
        }
    }

    protected function render_not_supported_integration_message($integration_type)
    {
        NPUtils::render('error', array(
            'message' => NPUtils::i18('NUAPAY Plugin - Not supported "%s" integration. Allowed only: "REDIRECT" or "OVERLAY".', array($integration_type))
        ));
    }

    protected function render_wrong_configuration_message()
    {
        NPUtils::render('error', array(
            'message' => NPUtils::i18('NUAPAY Plugin Not Configured Correctly contact support.')
        ));
    }

    protected function render_authentication_error_message($response, $token_response)
    {
        $error_message = '';

        if (is_object($response) && !is_null($response->returnDescription)) {
            $error_message = $response->returnDescription . ' (' . $response->returnCode . ')';
        } else {
            if (is_wp_error($token_response)) {
                $error_message = $token_response->get_error_message();
            } else {
                $error_message = wp_remote_retrieve_response_message($token_response);
            }
        }

        NPUtils::render('error', array(
            'message' => NPUtils::i18('Authentication error: %s', array($error_message))
        ));
    }

    protected function is_valid_token_response($token_response_code, $response)
    {
        return $token_response_code == 201 && !is_null($response->data && !is_null($response->data->token));
    }

    protected function get_sign_button($sign_button_id)
    {
        return '<button type="submit" class="btn btn-primary" id="' . $sign_button_id . '">' . NPUtils::i18('Sign') . '</button>';
    }

    protected function get_sign_redirect_button($sign_redirect_button)
    {
        return '<button type="submit" class="btn btn-primary" id="' . $sign_redirect_button . '">' . NPUtils::i18('Sign') . '</button>';
    }
}